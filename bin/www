#!/usr/bin/env node

/**
 * Module dependencies.
 */

  var app = require('../app');
  var debug = require('debug')('e-buyprocy:server');
  var http = require('http');
  const PRODUCT_HOST = '192.168.43.186' //产品价格socket地址
  const PRODUCT_PORT = 10000 //产品价格socket 端口
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   *  Create WebSocket server
   */



  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Config Socket.io server
   *
   */
  var Productsocket = null
  const net = require('net')
  var productIo = require('socket.io')(server);
  productIo.use(function (socket, next) {
    var token = socket.handshake.query.token;
    console.log("token:" + token)
    Productsocket = socket
    next()

  });
  const client = new net.Socket()
  client.setEncoding('utf-8')
  var curString = ''
   client.connect(PRODUCT_PORT,PRODUCT_HOST,function () {
      client.write('hello java')
   })
    client.on('data',function (data) {
      console.log(data)
      if(data.indexOf('10086') === -1 && curString === ''){
        curString += data
      }
      else if(data.indexOf('10086') !== -1 && curString === ''){

        if(Productsocket)
          Productsocket.emit('message', {productDetail:data.slice(0,-7)});
      }
      else if(data.indexOf('10086') !== -1 && curString !== ''){
         curString  += data

        if(Productsocket)
          Productsocket.emit('message', {productDetail:curString.slice(0,-7)});
        curString = ''
      }
  })

  client.on('error',function (err) {
    console.log(err)
  })

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }


